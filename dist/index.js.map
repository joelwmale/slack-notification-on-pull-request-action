{"version":3,"file":"index.js","mappingssources":["../webpack://slack-notification-on-pull-request-action/webpack/runtime/compat","../webpack://slack-notification-on-pull-request-action/./dist/main.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst http_1 = require(\"./http\");\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const slackWebhookUrl = core.getInput('SLACK_WEBHOOK_URL') ? core.getInput('SLACK_WEBHOOK_URL') : process.env.SLACK_WEBHOOK_URL;\n        const slackChannel = core.getInput('SLACK_CHANNEL') ? core.getInput('SLACK_CHANNEL') : 'general';\n        const slackUsername = core.getInput('SLACK_USERNAME') ? core.getInput('SLACK_USERNAME') : 'SlackNotifications';\n        const pullRequestNumber = core.getInput('PULL_REQUEST_NUMBER') ? core.getInput('PULL_REQUEST_NUMBER') : process.env.PULL_REQUEST_NUMBER;\n        const pullRequestTitle = core.getInput('PULL_REQUEST_TITLE') ? core.getInput('PULL_REQUEST_TITLE') : process.env.PULL_REQUEST_TITLE;\n        const pullRequestUrl = core.getInput('PULL_REQUEST_URL') ? core.getInput('PULL_REQUEST_URL') : process.env.PULL_REQUEST_URL;\n        const pullRequestAuthor = core.getInput('PULL_REQUEST_AUTHOR') ? core.getInput('PULL_REQUEST_AUTHOR') : process.env.PULL_REQUEST_AUTHOR;\n        const pullRequestAuthorIconUrl = core.getInput('PULL_REQUEST_AUTHOR_ICON_URL') ? core.getInput('PULL_REQUEST_AUTHOR_ICON_URL') : process.env.PULL_REQUEST_AUTHOR_ICON_URL;\n        // validate that we have a slack webhook url\n        if (!slackWebhookUrl) {\n            core.setFailed('A slack webhook url is required to run this action.');\n            // error\n            throw new Error('A slack webhook url is required to run this action.');\n        }\n        // initial info\n        core.info(`Sending slack notification to ${slackWebhookUrl}`);\n        // debug start\n        core.debug(new Date().toTimeString()); // debug is only output if you set the secret `ACTIONS_RUNNER_DEBUG` to true\n        const payload = JSON.stringify({\n            channel: slackChannel,\n            username: slackUsername,\n            attachments: [\n                {\n                    color: \"#f74ea1\",\n                    blocks: [\n                        {\n                            type: \"section\",\n                            block_id: \"pull_request_details\",\n                            text: {\n                                type: \"mrkdwn\",\n                                text: `*<${pullRequestUrl}|[${pullRequestNumber}] ${pullRequestTitle}>*`\n                            }\n                        },\n                        {\n                            type: \"context\",\n                            block_id: \"author\",\n                            elements: [\n                                {\n                                    type: \"image\",\n                                    image_url: pullRequestAuthorIconUrl,\n                                    alt_text: \"images\"\n                                },\n                                {\n                                    type: \"mrkdwn\",\n                                    text: pullRequestAuthor\n                                }\n                            ]\n                        },\n                        {\n                            type: \"actions\",\n                            elements: [\n                                {\n                                    type: \"button\",\n                                    text: {\n                                        type: \"plain_text\",\n                                        text: \"View Pull Request\",\n                                        emoji: true\n                                    },\n                                    value: pullRequestTitle,\n                                    url: pullRequestUrl,\n                                    action_id: \"actionId-0\",\n                                    style: \"primary\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        });\n        // make the request\n        http_1.http\n            .make(slackWebhookUrl, payload)\n            .then(res => {\n            // if the status code is not 2xx\n            if (res.status >= 400) {\n                // throw an error\n                error(res.status);\n                return;\n            }\n            // output the status\n            core.setOutput('statusCode', res.status);\n            // report on the status code\n            core.info(`Received status code: ${res.status}`);\n            // debug end\n            core.info(new Date().toTimeString());\n        })\n            .catch(err => {\n            error(err.status);\n            return;\n        });\n    });\n}\nfunction error(statusCode) {\n    // set the action to failed\n    core.setFailed(`Received status code: ${statusCode}`);\n    // throw an error\n    throw new Error(`Request failed with status code: ${statusCode}`);\n}\nrun();\n"],"names":[],"sourceRoot":""}